syntax = "proto3";
package msg;

/* 好友操作 */
message FriendCtrl {
  enum Type {
	FRIEND_REQ     = 0; // 添加
	FRIEND_DEL     = 1; // 删除
	FRIEND_AUTH_OK = 2; // 验证好友通过
	FRIEND_AUTH_REJECT = 3; // 验证好友不同过
  }
  int32 type = 1;
  bytes content = 2; // 添加删除的附带信箱，
}

/* 好友状态 */
message FriendState {
  enum Type {
	INPUTING = 0;  // 输入中
	ONLINE   = 1;  // 在线
	OFFLINE  = 2;  // 离线
  }
  int32 type = 1;
  int32 states = 2;
}

/* 好友消息 */
message FriendMsg {
  enum Type {
	CANCEL  = 0; // 撤回
	TEXT    = 1; // 文本
	PICTURE = 2; // 图片
	VIDEO   = 3; // 视频
	FILE    = 4; // 文件
	CACELED = 5; // 已撤回，用来标识一些数据
  }
  int32 type = 1;
  bytes content = 2;
}

/* 系统通知 */
message SystemNotify {
  enum Type {
	USER   = 0;
	FRIEND = 1;
	GROUP  = 2;
  }
  bytes content = 3;
}

/* 群聊操作 */
message GroupCtrl {
  enum Type {
	GROUP_CREATE      = 0; // 创建
	GROUP_DELETE      = 1; // 删除
	GROUP_ADD_MEMBER  = 2; // 添加成员
	GROUP_ENTER       = 3; // 进入
	GROUP_EXIT        = 4; // 退出
	GROUP_AUTH_OK     = 5; // 同意入群
	GROUP_AUTH_REJECT = 6; // 拒绝入群
  }
  int32 type = 2;
  bytes content = 3;
}

/* 群聊消息 */
message GroupMsg {
  enum Type {
	CANCEL  = 0; // 撤回
	TEXT    = 1; // 文本
	PICTURE = 2; // 图片
	VIDEO   = 3; // 视频
	FILE    = 4; // 文件
	CACELED = 5; // 已撤回
  }
  int32 type = 2;
  bytes content = 3;
}

/* 拉取消息 */
message Pull {
  enum Type {
    PULL_OFFLINE = 0; // 离线消息
    PULL_HISTORY = 1; // 历史消息
  }
  uint64 local_seq = 1; // 本地最大seq号
  int64  sync_time = 2; // 服务器设置，同步时间
  int32  type      = 3; // 类型
  uint32 limit     = 4; // 拉取，同步的条数
}

/* 登录 */
message Log {
  enum Type {
	LOGIN   = 0;  // 主动登录
	LOGOUT  = 1;  // 主动登出
	KICKOUT = 2;  // 被服务器踢出
  }
  int32 type = 1;
  string token = 2;
  bytes content = 3;
}

/* pb类型 */
enum ProtoReqType {
  TypeEmpty = 0;
  TypeFriendCtrl = 1;
  TypeFriendState = 2;
  TypeFriendMsg = 3;
  TypeSystemNotify = 4;
  TypeGroupCtrl = 5;
  TypeGroupMsg = 6;
  TypePull = 7;
  TypeLog = 8;
}

/* pb请求 */
message ProtoReq {
  enum Version {
	VERSION_0 = 0;
  }
  ProtoReqType type  = 1; // 数据类型
  uint32 version  = 2; // 协议版本
  uint64 from_uid = 3; // required
  uint64 to_id    = 4; // required
  oneof data {         // required
    FriendCtrl   fctrl  = 11;
	FriendState  fstate = 12;
	FriendMsg    fmsg   = 13;
	SystemNotify notify = 14;
	GroupCtrl    gctrl  = 15;
	GroupMsg     gmsg   = 16;
	Pull         pull   = 17;
	Log          log    = 18;
  }
}

/* pb响应 */
message ProtoResp {
  oneof result {
    int64 timestamp  = 1; // 成功的时间戳
    int32 error_code = 2; // 错误码
  }
  oneof str {
	string msgid     = 3; // 消息唯一id，信箱中存储唯一msgid
	string err       = 4;
  }
}

////////////////////////////////////////////////////////////////////////////////

/* 写入kafka的数据 */
message MqMessage {
  ProtoReq origin_req     = 1; // 原消息
  ProtoResp handle_result = 2; // 结果
}

/* transfer消费到后需要推送的数据 */
message PushReq {
  MqMessage message = 1; // 消息
  int64     seq     = 2; // 用户的seq号
  uint64    to_uid  = 3; // 要推送给的用户id
}

message PushResp {
// 空
}

////////////////////////////////////////////////////////////////////////////////

service LogicService {
  rpc Handle(ProtoReq) returns(ProtoResp);
}

////////////////////////////////////////////////////////////////////////////////