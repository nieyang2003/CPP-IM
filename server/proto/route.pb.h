// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_route_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_route_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_route_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_route_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_route_2eproto;
namespace route {
class DispatchMsgServerRequest;
struct DispatchMsgServerRequestDefaultTypeInternal;
extern DispatchMsgServerRequestDefaultTypeInternal _DispatchMsgServerRequest_default_instance_;
class DispatchMsgServerResponse;
struct DispatchMsgServerResponseDefaultTypeInternal;
extern DispatchMsgServerResponseDefaultTypeInternal _DispatchMsgServerResponse_default_instance_;
class GetMsgServerRequest;
struct GetMsgServerRequestDefaultTypeInternal;
extern GetMsgServerRequestDefaultTypeInternal _GetMsgServerRequest_default_instance_;
class GetMsgServerResponse;
struct GetMsgServerResponseDefaultTypeInternal;
extern GetMsgServerResponseDefaultTypeInternal _GetMsgServerResponse_default_instance_;
class HeartBeatRequest;
struct HeartBeatRequestDefaultTypeInternal;
extern HeartBeatRequestDefaultTypeInternal _HeartBeatRequest_default_instance_;
class HeartBeatResponse;
struct HeartBeatResponseDefaultTypeInternal;
extern HeartBeatResponseDefaultTypeInternal _HeartBeatResponse_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
}  // namespace route
PROTOBUF_NAMESPACE_OPEN
template<> ::route::DispatchMsgServerRequest* Arena::CreateMaybeMessage<::route::DispatchMsgServerRequest>(Arena*);
template<> ::route::DispatchMsgServerResponse* Arena::CreateMaybeMessage<::route::DispatchMsgServerResponse>(Arena*);
template<> ::route::GetMsgServerRequest* Arena::CreateMaybeMessage<::route::GetMsgServerRequest>(Arena*);
template<> ::route::GetMsgServerResponse* Arena::CreateMaybeMessage<::route::GetMsgServerResponse>(Arena*);
template<> ::route::HeartBeatRequest* Arena::CreateMaybeMessage<::route::HeartBeatRequest>(Arena*);
template<> ::route::HeartBeatResponse* Arena::CreateMaybeMessage<::route::HeartBeatResponse>(Arena*);
template<> ::route::LoginRequest* Arena::CreateMaybeMessage<::route::LoginRequest>(Arena*);
template<> ::route::LoginResponse* Arena::CreateMaybeMessage<::route::LoginResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace route {

// ===================================================================

class LoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  ~LoginRequest() override;
  explicit PROTOBUF_CONSTEXPR LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginRequest& from) {
    LoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:route.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    uint64_t uid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:route.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR LoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LoginResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LoginResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:route.LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_route_2eproto;
};
// -------------------------------------------------------------------

class DispatchMsgServerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route.DispatchMsgServerRequest) */ {
 public:
  inline DispatchMsgServerRequest() : DispatchMsgServerRequest(nullptr) {}
  ~DispatchMsgServerRequest() override;
  explicit PROTOBUF_CONSTEXPR DispatchMsgServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DispatchMsgServerRequest(const DispatchMsgServerRequest& from);
  DispatchMsgServerRequest(DispatchMsgServerRequest&& from) noexcept
    : DispatchMsgServerRequest() {
    *this = ::std::move(from);
  }

  inline DispatchMsgServerRequest& operator=(const DispatchMsgServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DispatchMsgServerRequest& operator=(DispatchMsgServerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DispatchMsgServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DispatchMsgServerRequest* internal_default_instance() {
    return reinterpret_cast<const DispatchMsgServerRequest*>(
               &_DispatchMsgServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DispatchMsgServerRequest& a, DispatchMsgServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DispatchMsgServerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DispatchMsgServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DispatchMsgServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DispatchMsgServerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DispatchMsgServerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DispatchMsgServerRequest& from) {
    DispatchMsgServerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DispatchMsgServerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route.DispatchMsgServerRequest";
  }
  protected:
  explicit DispatchMsgServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:route.DispatchMsgServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    uint64_t uid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_2eproto;
};
// -------------------------------------------------------------------

class DispatchMsgServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route.DispatchMsgServerResponse) */ {
 public:
  inline DispatchMsgServerResponse() : DispatchMsgServerResponse(nullptr) {}
  ~DispatchMsgServerResponse() override;
  explicit PROTOBUF_CONSTEXPR DispatchMsgServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DispatchMsgServerResponse(const DispatchMsgServerResponse& from);
  DispatchMsgServerResponse(DispatchMsgServerResponse&& from) noexcept
    : DispatchMsgServerResponse() {
    *this = ::std::move(from);
  }

  inline DispatchMsgServerResponse& operator=(const DispatchMsgServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DispatchMsgServerResponse& operator=(DispatchMsgServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DispatchMsgServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DispatchMsgServerResponse* internal_default_instance() {
    return reinterpret_cast<const DispatchMsgServerResponse*>(
               &_DispatchMsgServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DispatchMsgServerResponse& a, DispatchMsgServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DispatchMsgServerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DispatchMsgServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DispatchMsgServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DispatchMsgServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DispatchMsgServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DispatchMsgServerResponse& from) {
    DispatchMsgServerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DispatchMsgServerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route.DispatchMsgServerResponse";
  }
  protected:
  explicit DispatchMsgServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kTokenFieldNumber = 3,
  };
  // string location = 1;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:route.DispatchMsgServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_2eproto;
};
// -------------------------------------------------------------------

class HeartBeatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route.HeartBeatRequest) */ {
 public:
  inline HeartBeatRequest() : HeartBeatRequest(nullptr) {}
  ~HeartBeatRequest() override;
  explicit PROTOBUF_CONSTEXPR HeartBeatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeatRequest(const HeartBeatRequest& from);
  HeartBeatRequest(HeartBeatRequest&& from) noexcept
    : HeartBeatRequest() {
    *this = ::std::move(from);
  }

  inline HeartBeatRequest& operator=(const HeartBeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatRequest& operator=(HeartBeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartBeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartBeatRequest*>(
               &_HeartBeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HeartBeatRequest& a, HeartBeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartBeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartBeatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartBeatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartBeatRequest& from) {
    HeartBeatRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route.HeartBeatRequest";
  }
  protected:
  explicit HeartBeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidsFieldNumber = 3,
    kReportedFieldNumber = 1,
  };
  // repeated uint64 uids = 3;
  int uids_size() const;
  private:
  int _internal_uids_size() const;
  public:
  void clear_uids();
  private:
  uint64_t _internal_uids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_uids() const;
  void _internal_add_uids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_uids();
  public:
  uint64_t uids(int index) const;
  void set_uids(int index, uint64_t value);
  void add_uids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      uids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_uids();

  // string reported = 1;
  void clear_reported();
  const std::string& reported() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reported(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reported();
  PROTOBUF_NODISCARD std::string* release_reported();
  void set_allocated_reported(std::string* reported);
  private:
  const std::string& _internal_reported() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reported(const std::string& value);
  std::string* _internal_mutable_reported();
  public:

  // @@protoc_insertion_point(class_scope:route.HeartBeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > uids_;
    mutable std::atomic<int> _uids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reported_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_2eproto;
};
// -------------------------------------------------------------------

class HeartBeatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route.HeartBeatResponse) */ {
 public:
  inline HeartBeatResponse() : HeartBeatResponse(nullptr) {}
  ~HeartBeatResponse() override;
  explicit PROTOBUF_CONSTEXPR HeartBeatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeatResponse(const HeartBeatResponse& from);
  HeartBeatResponse(HeartBeatResponse&& from) noexcept
    : HeartBeatResponse() {
    *this = ::std::move(from);
  }

  inline HeartBeatResponse& operator=(const HeartBeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatResponse& operator=(HeartBeatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartBeatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeartBeatResponse*>(
               &_HeartBeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HeartBeatResponse& a, HeartBeatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartBeatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartBeatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartBeatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartBeatResponse& from) {
    HeartBeatResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route.HeartBeatResponse";
  }
  protected:
  explicit HeartBeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:route.HeartBeatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_2eproto;
};
// -------------------------------------------------------------------

class GetMsgServerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route.GetMsgServerRequest) */ {
 public:
  inline GetMsgServerRequest() : GetMsgServerRequest(nullptr) {}
  ~GetMsgServerRequest() override;
  explicit PROTOBUF_CONSTEXPR GetMsgServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMsgServerRequest(const GetMsgServerRequest& from);
  GetMsgServerRequest(GetMsgServerRequest&& from) noexcept
    : GetMsgServerRequest() {
    *this = ::std::move(from);
  }

  inline GetMsgServerRequest& operator=(const GetMsgServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMsgServerRequest& operator=(GetMsgServerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMsgServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMsgServerRequest* internal_default_instance() {
    return reinterpret_cast<const GetMsgServerRequest*>(
               &_GetMsgServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetMsgServerRequest& a, GetMsgServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMsgServerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMsgServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMsgServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMsgServerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMsgServerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMsgServerRequest& from) {
    GetMsgServerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMsgServerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route.GetMsgServerRequest";
  }
  protected:
  explicit GetMsgServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:route.GetMsgServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t uid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_2eproto;
};
// -------------------------------------------------------------------

class GetMsgServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:route.GetMsgServerResponse) */ {
 public:
  inline GetMsgServerResponse() : GetMsgServerResponse(nullptr) {}
  ~GetMsgServerResponse() override;
  explicit PROTOBUF_CONSTEXPR GetMsgServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMsgServerResponse(const GetMsgServerResponse& from);
  GetMsgServerResponse(GetMsgServerResponse&& from) noexcept
    : GetMsgServerResponse() {
    *this = ::std::move(from);
  }

  inline GetMsgServerResponse& operator=(const GetMsgServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMsgServerResponse& operator=(GetMsgServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMsgServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMsgServerResponse* internal_default_instance() {
    return reinterpret_cast<const GetMsgServerResponse*>(
               &_GetMsgServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetMsgServerResponse& a, GetMsgServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMsgServerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMsgServerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMsgServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMsgServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMsgServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMsgServerResponse& from) {
    GetMsgServerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMsgServerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "route.GetMsgServerResponse";
  }
  protected:
  explicit GetMsgServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationsFieldNumber = 1,
  };
  // repeated string locations = 1;
  int locations_size() const;
  private:
  int _internal_locations_size() const;
  public:
  void clear_locations();
  const std::string& locations(int index) const;
  std::string* mutable_locations(int index);
  void set_locations(int index, const std::string& value);
  void set_locations(int index, std::string&& value);
  void set_locations(int index, const char* value);
  void set_locations(int index, const char* value, size_t size);
  std::string* add_locations();
  void add_locations(const std::string& value);
  void add_locations(std::string&& value);
  void add_locations(const char* value);
  void add_locations(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& locations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_locations();
  private:
  const std::string& _internal_locations(int index) const;
  std::string* _internal_add_locations();
  public:

  // @@protoc_insertion_point(class_scope:route.GetMsgServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> locations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_route_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequest

// uint64 uid = 1;
inline void LoginRequest::clear_uid() {
  _impl_.uid_ = uint64_t{0u};
}
inline uint64_t LoginRequest::_internal_uid() const {
  return _impl_.uid_;
}
inline uint64_t LoginRequest::uid() const {
  // @@protoc_insertion_point(field_get:route.LoginRequest.uid)
  return _internal_uid();
}
inline void LoginRequest::_internal_set_uid(uint64_t value) {
  
  _impl_.uid_ = value;
}
inline void LoginRequest::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:route.LoginRequest.uid)
}

// string token = 2;
inline void LoginRequest::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& LoginRequest::token() const {
  // @@protoc_insertion_point(field_get:route.LoginRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginRequest::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:route.LoginRequest.token)
}
inline std::string* LoginRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:route.LoginRequest.token)
  return _s;
}
inline const std::string& LoginRequest::_internal_token() const {
  return _impl_.token_.Get();
}
inline void LoginRequest::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginRequest::release_token() {
  // @@protoc_insertion_point(field_release:route.LoginRequest.token)
  return _impl_.token_.Release();
}
inline void LoginRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:route.LoginRequest.token)
}

// -------------------------------------------------------------------

// LoginResponse

// -------------------------------------------------------------------

// DispatchMsgServerRequest

// uint64 uid = 1;
inline void DispatchMsgServerRequest::clear_uid() {
  _impl_.uid_ = uint64_t{0u};
}
inline uint64_t DispatchMsgServerRequest::_internal_uid() const {
  return _impl_.uid_;
}
inline uint64_t DispatchMsgServerRequest::uid() const {
  // @@protoc_insertion_point(field_get:route.DispatchMsgServerRequest.uid)
  return _internal_uid();
}
inline void DispatchMsgServerRequest::_internal_set_uid(uint64_t value) {
  
  _impl_.uid_ = value;
}
inline void DispatchMsgServerRequest::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:route.DispatchMsgServerRequest.uid)
}

// string ip = 2;
inline void DispatchMsgServerRequest::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& DispatchMsgServerRequest::ip() const {
  // @@protoc_insertion_point(field_get:route.DispatchMsgServerRequest.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DispatchMsgServerRequest::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:route.DispatchMsgServerRequest.ip)
}
inline std::string* DispatchMsgServerRequest::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:route.DispatchMsgServerRequest.ip)
  return _s;
}
inline const std::string& DispatchMsgServerRequest::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void DispatchMsgServerRequest::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* DispatchMsgServerRequest::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* DispatchMsgServerRequest::release_ip() {
  // @@protoc_insertion_point(field_release:route.DispatchMsgServerRequest.ip)
  return _impl_.ip_.Release();
}
inline void DispatchMsgServerRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:route.DispatchMsgServerRequest.ip)
}

// -------------------------------------------------------------------

// DispatchMsgServerResponse

// string location = 1;
inline void DispatchMsgServerResponse::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& DispatchMsgServerResponse::location() const {
  // @@protoc_insertion_point(field_get:route.DispatchMsgServerResponse.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DispatchMsgServerResponse::set_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:route.DispatchMsgServerResponse.location)
}
inline std::string* DispatchMsgServerResponse::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:route.DispatchMsgServerResponse.location)
  return _s;
}
inline const std::string& DispatchMsgServerResponse::_internal_location() const {
  return _impl_.location_.Get();
}
inline void DispatchMsgServerResponse::_internal_set_location(const std::string& value) {
  
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* DispatchMsgServerResponse::_internal_mutable_location() {
  
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* DispatchMsgServerResponse::release_location() {
  // @@protoc_insertion_point(field_release:route.DispatchMsgServerResponse.location)
  return _impl_.location_.Release();
}
inline void DispatchMsgServerResponse::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:route.DispatchMsgServerResponse.location)
}

// string token = 3;
inline void DispatchMsgServerResponse::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& DispatchMsgServerResponse::token() const {
  // @@protoc_insertion_point(field_get:route.DispatchMsgServerResponse.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DispatchMsgServerResponse::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:route.DispatchMsgServerResponse.token)
}
inline std::string* DispatchMsgServerResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:route.DispatchMsgServerResponse.token)
  return _s;
}
inline const std::string& DispatchMsgServerResponse::_internal_token() const {
  return _impl_.token_.Get();
}
inline void DispatchMsgServerResponse::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* DispatchMsgServerResponse::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* DispatchMsgServerResponse::release_token() {
  // @@protoc_insertion_point(field_release:route.DispatchMsgServerResponse.token)
  return _impl_.token_.Release();
}
inline void DispatchMsgServerResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:route.DispatchMsgServerResponse.token)
}

// -------------------------------------------------------------------

// HeartBeatRequest

// string reported = 1;
inline void HeartBeatRequest::clear_reported() {
  _impl_.reported_.ClearToEmpty();
}
inline const std::string& HeartBeatRequest::reported() const {
  // @@protoc_insertion_point(field_get:route.HeartBeatRequest.reported)
  return _internal_reported();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HeartBeatRequest::set_reported(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reported_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:route.HeartBeatRequest.reported)
}
inline std::string* HeartBeatRequest::mutable_reported() {
  std::string* _s = _internal_mutable_reported();
  // @@protoc_insertion_point(field_mutable:route.HeartBeatRequest.reported)
  return _s;
}
inline const std::string& HeartBeatRequest::_internal_reported() const {
  return _impl_.reported_.Get();
}
inline void HeartBeatRequest::_internal_set_reported(const std::string& value) {
  
  _impl_.reported_.Set(value, GetArenaForAllocation());
}
inline std::string* HeartBeatRequest::_internal_mutable_reported() {
  
  return _impl_.reported_.Mutable(GetArenaForAllocation());
}
inline std::string* HeartBeatRequest::release_reported() {
  // @@protoc_insertion_point(field_release:route.HeartBeatRequest.reported)
  return _impl_.reported_.Release();
}
inline void HeartBeatRequest::set_allocated_reported(std::string* reported) {
  if (reported != nullptr) {
    
  } else {
    
  }
  _impl_.reported_.SetAllocated(reported, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reported_.IsDefault()) {
    _impl_.reported_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:route.HeartBeatRequest.reported)
}

// repeated uint64 uids = 3;
inline int HeartBeatRequest::_internal_uids_size() const {
  return _impl_.uids_.size();
}
inline int HeartBeatRequest::uids_size() const {
  return _internal_uids_size();
}
inline void HeartBeatRequest::clear_uids() {
  _impl_.uids_.Clear();
}
inline uint64_t HeartBeatRequest::_internal_uids(int index) const {
  return _impl_.uids_.Get(index);
}
inline uint64_t HeartBeatRequest::uids(int index) const {
  // @@protoc_insertion_point(field_get:route.HeartBeatRequest.uids)
  return _internal_uids(index);
}
inline void HeartBeatRequest::set_uids(int index, uint64_t value) {
  _impl_.uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:route.HeartBeatRequest.uids)
}
inline void HeartBeatRequest::_internal_add_uids(uint64_t value) {
  _impl_.uids_.Add(value);
}
inline void HeartBeatRequest::add_uids(uint64_t value) {
  _internal_add_uids(value);
  // @@protoc_insertion_point(field_add:route.HeartBeatRequest.uids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
HeartBeatRequest::_internal_uids() const {
  return _impl_.uids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
HeartBeatRequest::uids() const {
  // @@protoc_insertion_point(field_list:route.HeartBeatRequest.uids)
  return _internal_uids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
HeartBeatRequest::_internal_mutable_uids() {
  return &_impl_.uids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
HeartBeatRequest::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:route.HeartBeatRequest.uids)
  return _internal_mutable_uids();
}

// -------------------------------------------------------------------

// HeartBeatResponse

// string token = 1;
inline void HeartBeatResponse::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& HeartBeatResponse::token() const {
  // @@protoc_insertion_point(field_get:route.HeartBeatResponse.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HeartBeatResponse::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:route.HeartBeatResponse.token)
}
inline std::string* HeartBeatResponse::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:route.HeartBeatResponse.token)
  return _s;
}
inline const std::string& HeartBeatResponse::_internal_token() const {
  return _impl_.token_.Get();
}
inline void HeartBeatResponse::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* HeartBeatResponse::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* HeartBeatResponse::release_token() {
  // @@protoc_insertion_point(field_release:route.HeartBeatResponse.token)
  return _impl_.token_.Release();
}
inline void HeartBeatResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:route.HeartBeatResponse.token)
}

// -------------------------------------------------------------------

// GetMsgServerRequest

// uint64 uid = 1;
inline void GetMsgServerRequest::clear_uid() {
  _impl_.uid_ = uint64_t{0u};
}
inline uint64_t GetMsgServerRequest::_internal_uid() const {
  return _impl_.uid_;
}
inline uint64_t GetMsgServerRequest::uid() const {
  // @@protoc_insertion_point(field_get:route.GetMsgServerRequest.uid)
  return _internal_uid();
}
inline void GetMsgServerRequest::_internal_set_uid(uint64_t value) {
  
  _impl_.uid_ = value;
}
inline void GetMsgServerRequest::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:route.GetMsgServerRequest.uid)
}

// -------------------------------------------------------------------

// GetMsgServerResponse

// repeated string locations = 1;
inline int GetMsgServerResponse::_internal_locations_size() const {
  return _impl_.locations_.size();
}
inline int GetMsgServerResponse::locations_size() const {
  return _internal_locations_size();
}
inline void GetMsgServerResponse::clear_locations() {
  _impl_.locations_.Clear();
}
inline std::string* GetMsgServerResponse::add_locations() {
  std::string* _s = _internal_add_locations();
  // @@protoc_insertion_point(field_add_mutable:route.GetMsgServerResponse.locations)
  return _s;
}
inline const std::string& GetMsgServerResponse::_internal_locations(int index) const {
  return _impl_.locations_.Get(index);
}
inline const std::string& GetMsgServerResponse::locations(int index) const {
  // @@protoc_insertion_point(field_get:route.GetMsgServerResponse.locations)
  return _internal_locations(index);
}
inline std::string* GetMsgServerResponse::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:route.GetMsgServerResponse.locations)
  return _impl_.locations_.Mutable(index);
}
inline void GetMsgServerResponse::set_locations(int index, const std::string& value) {
  _impl_.locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:route.GetMsgServerResponse.locations)
}
inline void GetMsgServerResponse::set_locations(int index, std::string&& value) {
  _impl_.locations_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:route.GetMsgServerResponse.locations)
}
inline void GetMsgServerResponse::set_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:route.GetMsgServerResponse.locations)
}
inline void GetMsgServerResponse::set_locations(int index, const char* value, size_t size) {
  _impl_.locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:route.GetMsgServerResponse.locations)
}
inline std::string* GetMsgServerResponse::_internal_add_locations() {
  return _impl_.locations_.Add();
}
inline void GetMsgServerResponse::add_locations(const std::string& value) {
  _impl_.locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:route.GetMsgServerResponse.locations)
}
inline void GetMsgServerResponse::add_locations(std::string&& value) {
  _impl_.locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:route.GetMsgServerResponse.locations)
}
inline void GetMsgServerResponse::add_locations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:route.GetMsgServerResponse.locations)
}
inline void GetMsgServerResponse::add_locations(const char* value, size_t size) {
  _impl_.locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:route.GetMsgServerResponse.locations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetMsgServerResponse::locations() const {
  // @@protoc_insertion_point(field_list:route.GetMsgServerResponse.locations)
  return _impl_.locations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetMsgServerResponse::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:route.GetMsgServerResponse.locations)
  return &_impl_.locations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace route

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_route_2eproto
