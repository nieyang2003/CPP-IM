// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace msg {
PROTOBUF_CONSTEXPR FriendCtrl::FriendCtrl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FriendCtrlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendCtrlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendCtrlDefaultTypeInternal() {}
  union {
    FriendCtrl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendCtrlDefaultTypeInternal _FriendCtrl_default_instance_;
PROTOBUF_CONSTEXPR FriendState::FriendState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.states_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FriendStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendStateDefaultTypeInternal() {}
  union {
    FriendState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendStateDefaultTypeInternal _FriendState_default_instance_;
PROTOBUF_CONSTEXPR FriendMsg::FriendMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FriendMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FriendMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FriendMsgDefaultTypeInternal() {}
  union {
    FriendMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FriendMsgDefaultTypeInternal _FriendMsg_default_instance_;
PROTOBUF_CONSTEXPR SystemNotify::SystemNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SystemNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SystemNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SystemNotifyDefaultTypeInternal() {}
  union {
    SystemNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SystemNotifyDefaultTypeInternal _SystemNotify_default_instance_;
PROTOBUF_CONSTEXPR GroupCtrl::GroupCtrl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupCtrlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupCtrlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupCtrlDefaultTypeInternal() {}
  union {
    GroupCtrl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupCtrlDefaultTypeInternal _GroupCtrl_default_instance_;
PROTOBUF_CONSTEXPR GroupMsg::GroupMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupMsgDefaultTypeInternal() {}
  union {
    GroupMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupMsgDefaultTypeInternal _GroupMsg_default_instance_;
PROTOBUF_CONSTEXPR Pull::Pull(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.local_seq_)*/uint64_t{0u}
  , /*decltype(_impl_.sync_time_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.limit_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PullDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PullDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PullDefaultTypeInternal() {}
  union {
    Pull _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PullDefaultTypeInternal _Pull_default_instance_;
PROTOBUF_CONSTEXPR Log::Log(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogDefaultTypeInternal() {}
  union {
    Log _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogDefaultTypeInternal _Log_default_instance_;
PROTOBUF_CONSTEXPR ProtoReq::ProtoReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.from_uid_)*/uint64_t{0u}
  , /*decltype(_impl_.to_id_)*/uint64_t{0u}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ProtoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoReqDefaultTypeInternal() {}
  union {
    ProtoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoReqDefaultTypeInternal _ProtoReq_default_instance_;
PROTOBUF_CONSTEXPR ProtoResp::ProtoResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_.str_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ProtoRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoRespDefaultTypeInternal() {}
  union {
    ProtoResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoRespDefaultTypeInternal _ProtoResp_default_instance_;
PROTOBUF_CONSTEXPR MqMessage::MqMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.origin_req_)*/nullptr
  , /*decltype(_impl_.handle_result_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MqMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MqMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MqMessageDefaultTypeInternal() {}
  union {
    MqMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MqMessageDefaultTypeInternal _MqMessage_default_instance_;
PROTOBUF_CONSTEXPR PushReq::PushReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/nullptr
  , /*decltype(_impl_.seq_)*/int64_t{0}
  , /*decltype(_impl_.to_uid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PushReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PushReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PushReqDefaultTypeInternal() {}
  union {
    PushReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PushReqDefaultTypeInternal _PushReq_default_instance_;
PROTOBUF_CONSTEXPR PushResp::PushResp(
    ::_pbi::ConstantInitialized) {}
struct PushRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PushRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PushRespDefaultTypeInternal() {}
  union {
    PushResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PushRespDefaultTypeInternal _PushResp_default_instance_;
}  // namespace msg
static ::_pb::Metadata file_level_metadata_msg_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_msg_2eproto[10];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const uint32_t TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::FriendCtrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::FriendCtrl, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::FriendCtrl, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::FriendState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::FriendState, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::FriendState, _impl_.states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::FriendMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::FriendMsg, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::FriendMsg, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::SystemNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::SystemNotify, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GroupCtrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GroupCtrl, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::GroupCtrl, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GroupMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GroupMsg, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::GroupMsg, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Pull, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Pull, _impl_.local_seq_),
  PROTOBUF_FIELD_OFFSET(::msg::Pull, _impl_.sync_time_),
  PROTOBUF_FIELD_OFFSET(::msg::Pull, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::Pull, _impl_.limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Log, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::Log, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::msg::Log, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ProtoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::msg::ProtoReq, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ProtoReq, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::ProtoReq, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::msg::ProtoReq, _impl_.from_uid_),
  PROTOBUF_FIELD_OFFSET(::msg::ProtoReq, _impl_.to_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::msg::ProtoReq, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ProtoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::msg::ProtoResp, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::msg::ProtoResp, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::msg::ProtoResp, _impl_.str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::MqMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::MqMessage, _impl_.origin_req_),
  PROTOBUF_FIELD_OFFSET(::msg::MqMessage, _impl_.handle_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PushReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PushReq, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::msg::PushReq, _impl_.seq_),
  PROTOBUF_FIELD_OFFSET(::msg::PushReq, _impl_.to_uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PushResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::msg::FriendCtrl)},
  { 8, -1, -1, sizeof(::msg::FriendState)},
  { 16, -1, -1, sizeof(::msg::FriendMsg)},
  { 24, -1, -1, sizeof(::msg::SystemNotify)},
  { 31, -1, -1, sizeof(::msg::GroupCtrl)},
  { 39, -1, -1, sizeof(::msg::GroupMsg)},
  { 47, -1, -1, sizeof(::msg::Pull)},
  { 57, -1, -1, sizeof(::msg::Log)},
  { 66, -1, -1, sizeof(::msg::ProtoReq)},
  { 85, -1, -1, sizeof(::msg::ProtoResp)},
  { 97, -1, -1, sizeof(::msg::MqMessage)},
  { 105, -1, -1, sizeof(::msg::PushReq)},
  { 114, -1, -1, sizeof(::msg::PushResp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::msg::_FriendCtrl_default_instance_._instance,
  &::msg::_FriendState_default_instance_._instance,
  &::msg::_FriendMsg_default_instance_._instance,
  &::msg::_SystemNotify_default_instance_._instance,
  &::msg::_GroupCtrl_default_instance_._instance,
  &::msg::_GroupMsg_default_instance_._instance,
  &::msg::_Pull_default_instance_._instance,
  &::msg::_Log_default_instance_._instance,
  &::msg::_ProtoReq_default_instance_._instance,
  &::msg::_ProtoResp_default_instance_._instance,
  &::msg::_MqMessage_default_instance_._instance,
  &::msg::_PushReq_default_instance_._instance,
  &::msg::_PushResp_default_instance_._instance,
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\022\003msg\"\177\n\nFriendCtrl\022\014\n\004type\030\001"
  " \001(\005\022\017\n\007content\030\002 \001(\014\"R\n\004Type\022\016\n\nFRIEND_"
  "REQ\020\000\022\016\n\nFRIEND_DEL\020\001\022\022\n\016FRIEND_AUTH_OK\020"
  "\002\022\026\n\022FRIEND_AUTH_REJECT\020\003\"Z\n\013FriendState"
  "\022\014\n\004type\030\001 \001(\005\022\016\n\006states\030\002 \001(\005\"-\n\004Type\022\014"
  "\n\010INPUTING\020\000\022\n\n\006ONLINE\020\001\022\013\n\007OFFLINE\020\002\"w\n"
  "\tFriendMsg\022\014\n\004type\030\001 \001(\005\022\017\n\007content\030\002 \001("
  "\014\"K\n\004Type\022\n\n\006CANCEL\020\000\022\010\n\004TEXT\020\001\022\013\n\007PICTU"
  "RE\020\002\022\t\n\005VIDEO\020\003\022\010\n\004FILE\020\004\022\013\n\007CACELED\020\005\"H"
  "\n\014SystemNotify\022\017\n\007content\030\003 \001(\014\"\'\n\004Type\022"
  "\010\n\004USER\020\000\022\n\n\006FRIEND\020\001\022\t\n\005GROUP\020\002\"\270\001\n\tGro"
  "upCtrl\022\014\n\004type\030\002 \001(\005\022\017\n\007content\030\003 \001(\014\"\213\001"
  "\n\004Type\022\020\n\014GROUP_CREATE\020\000\022\020\n\014GROUP_DELETE"
  "\020\001\022\024\n\020GROUP_ADD_MEMBER\020\002\022\017\n\013GROUP_ENTER\020"
  "\003\022\016\n\nGROUP_EXIT\020\004\022\021\n\rGROUP_AUTH_OK\020\005\022\025\n\021"
  "GROUP_AUTH_REJECT\020\006\"v\n\010GroupMsg\022\014\n\004type\030"
  "\002 \001(\005\022\017\n\007content\030\003 \001(\014\"K\n\004Type\022\n\n\006CANCEL"
  "\020\000\022\010\n\004TEXT\020\001\022\013\n\007PICTURE\020\002\022\t\n\005VIDEO\020\003\022\010\n\004"
  "FILE\020\004\022\013\n\007CACELED\020\005\"u\n\004Pull\022\021\n\tlocal_seq"
  "\030\001 \001(\004\022\021\n\tsync_time\030\002 \001(\003\022\014\n\004type\030\003 \001(\005\022"
  "\r\n\005limit\030\004 \001(\r\"*\n\004Type\022\020\n\014PULL_OFFLINE\020\000"
  "\022\020\n\014PULL_HISTORY\020\001\"_\n\003Log\022\014\n\004type\030\001 \001(\005\022"
  "\r\n\005token\030\002 \001(\t\022\017\n\007content\030\003 \001(\014\"*\n\004Type\022"
  "\t\n\005LOGIN\020\000\022\n\n\006LOGOUT\020\001\022\013\n\007KICKOUT\020\002\"\376\002\n\010"
  "ProtoReq\022\037\n\004type\030\001 \001(\0162\021.msg.ProtoReqTyp"
  "e\022\017\n\007version\030\002 \001(\r\022\020\n\010from_uid\030\003 \001(\004\022\r\n\005"
  "to_id\030\004 \001(\004\022 \n\005fctrl\030\013 \001(\0132\017.msg.FriendC"
  "trlH\000\022\"\n\006fstate\030\014 \001(\0132\020.msg.FriendStateH"
  "\000\022\036\n\004fmsg\030\r \001(\0132\016.msg.FriendMsgH\000\022#\n\006not"
  "ify\030\016 \001(\0132\021.msg.SystemNotifyH\000\022\037\n\005gctrl\030"
  "\017 \001(\0132\016.msg.GroupCtrlH\000\022\035\n\004gmsg\030\020 \001(\0132\r."
  "msg.GroupMsgH\000\022\031\n\004pull\030\021 \001(\0132\t.msg.PullH"
  "\000\022\027\n\003log\030\022 \001(\0132\010.msg.LogH\000\"\030\n\007Version\022\r\n"
  "\tVERSION_0\020\000B\006\n\004data\"g\n\tProtoResp\022\023\n\ttim"
  "estamp\030\001 \001(\003H\000\022\024\n\nerror_code\030\002 \001(\005H\000\022\017\n\005"
  "msgid\030\003 \001(\tH\001\022\r\n\003err\030\004 \001(\tH\001B\010\n\006resultB\005"
  "\n\003str\"U\n\tMqMessage\022!\n\norigin_req\030\001 \001(\0132\r"
  ".msg.ProtoReq\022%\n\rhandle_result\030\002 \001(\0132\016.m"
  "sg.ProtoResp\"G\n\007PushReq\022\037\n\007message\030\001 \001(\013"
  "2\016.msg.MqMessage\022\013\n\003seq\030\002 \001(\003\022\016\n\006to_uid\030"
  "\003 \001(\004\"\n\n\010PushResp*\257\001\n\014ProtoReqType\022\r\n\tTy"
  "peEmpty\020\000\022\022\n\016TypeFriendCtrl\020\001\022\023\n\017TypeFri"
  "endState\020\002\022\021\n\rTypeFriendMsg\020\003\022\024\n\020TypeSys"
  "temNotify\020\004\022\021\n\rTypeGroupCtrl\020\005\022\020\n\014TypeGr"
  "oupMsg\020\006\022\014\n\010TypePull\020\007\022\013\n\007TypeLog\020\01027\n\014L"
  "ogicService\022\'\n\006Handle\022\r.msg.ProtoReq\032\016.m"
  "sg.ProtoRespb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_msg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_2eproto = {
    false, false, 1860, descriptor_table_protodef_msg_2eproto,
    "msg.proto",
    &descriptor_table_msg_2eproto_once, nullptr, 0, 13,
    schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
    file_level_metadata_msg_2eproto, file_level_enum_descriptors_msg_2eproto,
    file_level_service_descriptors_msg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_2eproto_getter() {
  return &descriptor_table_msg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FriendCtrl_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[0];
}
bool FriendCtrl_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FriendCtrl_Type FriendCtrl::FRIEND_REQ;
constexpr FriendCtrl_Type FriendCtrl::FRIEND_DEL;
constexpr FriendCtrl_Type FriendCtrl::FRIEND_AUTH_OK;
constexpr FriendCtrl_Type FriendCtrl::FRIEND_AUTH_REJECT;
constexpr FriendCtrl_Type FriendCtrl::Type_MIN;
constexpr FriendCtrl_Type FriendCtrl::Type_MAX;
constexpr int FriendCtrl::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FriendState_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[1];
}
bool FriendState_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FriendState_Type FriendState::INPUTING;
constexpr FriendState_Type FriendState::ONLINE;
constexpr FriendState_Type FriendState::OFFLINE;
constexpr FriendState_Type FriendState::Type_MIN;
constexpr FriendState_Type FriendState::Type_MAX;
constexpr int FriendState::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FriendMsg_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[2];
}
bool FriendMsg_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FriendMsg_Type FriendMsg::CANCEL;
constexpr FriendMsg_Type FriendMsg::TEXT;
constexpr FriendMsg_Type FriendMsg::PICTURE;
constexpr FriendMsg_Type FriendMsg::VIDEO;
constexpr FriendMsg_Type FriendMsg::FILE;
constexpr FriendMsg_Type FriendMsg::CACELED;
constexpr FriendMsg_Type FriendMsg::Type_MIN;
constexpr FriendMsg_Type FriendMsg::Type_MAX;
constexpr int FriendMsg::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemNotify_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[3];
}
bool SystemNotify_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SystemNotify_Type SystemNotify::USER;
constexpr SystemNotify_Type SystemNotify::FRIEND;
constexpr SystemNotify_Type SystemNotify::GROUP;
constexpr SystemNotify_Type SystemNotify::Type_MIN;
constexpr SystemNotify_Type SystemNotify::Type_MAX;
constexpr int SystemNotify::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupCtrl_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[4];
}
bool GroupCtrl_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GroupCtrl_Type GroupCtrl::GROUP_CREATE;
constexpr GroupCtrl_Type GroupCtrl::GROUP_DELETE;
constexpr GroupCtrl_Type GroupCtrl::GROUP_ADD_MEMBER;
constexpr GroupCtrl_Type GroupCtrl::GROUP_ENTER;
constexpr GroupCtrl_Type GroupCtrl::GROUP_EXIT;
constexpr GroupCtrl_Type GroupCtrl::GROUP_AUTH_OK;
constexpr GroupCtrl_Type GroupCtrl::GROUP_AUTH_REJECT;
constexpr GroupCtrl_Type GroupCtrl::Type_MIN;
constexpr GroupCtrl_Type GroupCtrl::Type_MAX;
constexpr int GroupCtrl::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupMsg_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[5];
}
bool GroupMsg_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GroupMsg_Type GroupMsg::CANCEL;
constexpr GroupMsg_Type GroupMsg::TEXT;
constexpr GroupMsg_Type GroupMsg::PICTURE;
constexpr GroupMsg_Type GroupMsg::VIDEO;
constexpr GroupMsg_Type GroupMsg::FILE;
constexpr GroupMsg_Type GroupMsg::CACELED;
constexpr GroupMsg_Type GroupMsg::Type_MIN;
constexpr GroupMsg_Type GroupMsg::Type_MAX;
constexpr int GroupMsg::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pull_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[6];
}
bool Pull_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Pull_Type Pull::PULL_OFFLINE;
constexpr Pull_Type Pull::PULL_HISTORY;
constexpr Pull_Type Pull::Type_MIN;
constexpr Pull_Type Pull::Type_MAX;
constexpr int Pull::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Log_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[7];
}
bool Log_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Log_Type Log::LOGIN;
constexpr Log_Type Log::LOGOUT;
constexpr Log_Type Log::KICKOUT;
constexpr Log_Type Log::Type_MIN;
constexpr Log_Type Log::Type_MAX;
constexpr int Log::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoReq_Version_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[8];
}
bool ProtoReq_Version_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ProtoReq_Version ProtoReq::VERSION_0;
constexpr ProtoReq_Version ProtoReq::Version_MIN;
constexpr ProtoReq_Version ProtoReq::Version_MAX;
constexpr int ProtoReq::Version_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProtoReqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[9];
}
bool ProtoReqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FriendCtrl::_Internal {
 public:
};

FriendCtrl::FriendCtrl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.FriendCtrl)
}
FriendCtrl::FriendCtrl(const FriendCtrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FriendCtrl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:msg.FriendCtrl)
}

inline void FriendCtrl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FriendCtrl::~FriendCtrl() {
  // @@protoc_insertion_point(destructor:msg.FriendCtrl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendCtrl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void FriendCtrl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FriendCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.FriendCtrl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendCtrl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendCtrl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.FriendCtrl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.FriendCtrl)
  return target;
}

size_t FriendCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.FriendCtrl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendCtrl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FriendCtrl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendCtrl::GetClassData() const { return &_class_data_; }


void FriendCtrl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FriendCtrl*>(&to_msg);
  auto& from = static_cast<const FriendCtrl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.FriendCtrl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendCtrl::CopyFrom(const FriendCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.FriendCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendCtrl::IsInitialized() const {
  return true;
}

void FriendCtrl::InternalSwap(FriendCtrl* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendCtrl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[0]);
}

// ===================================================================

class FriendState::_Internal {
 public:
};

FriendState::FriendState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.FriendState)
}
FriendState::FriendState(const FriendState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FriendState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.states_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.states_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.states_));
  // @@protoc_insertion_point(copy_constructor:msg.FriendState)
}

inline void FriendState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.states_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FriendState::~FriendState() {
  // @@protoc_insertion_point(destructor:msg.FriendState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FriendState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FriendState::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.FriendState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.states_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.states_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.states_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.FriendState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 states = 2;
  if (this->_internal_states() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_states(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.FriendState)
  return target;
}

size_t FriendState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.FriendState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 states = 2;
  if (this->_internal_states() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_states());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FriendState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendState::GetClassData() const { return &_class_data_; }


void FriendState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FriendState*>(&to_msg);
  auto& from = static_cast<const FriendState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.FriendState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_states() != 0) {
    _this->_internal_set_states(from._internal_states());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendState::CopyFrom(const FriendState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.FriendState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendState::IsInitialized() const {
  return true;
}

void FriendState::InternalSwap(FriendState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FriendState, _impl_.states_)
      + sizeof(FriendState::_impl_.states_)
      - PROTOBUF_FIELD_OFFSET(FriendState, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[1]);
}

// ===================================================================

class FriendMsg::_Internal {
 public:
};

FriendMsg::FriendMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.FriendMsg)
}
FriendMsg::FriendMsg(const FriendMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FriendMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:msg.FriendMsg)
}

inline void FriendMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FriendMsg::~FriendMsg() {
  // @@protoc_insertion_point(destructor:msg.FriendMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FriendMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void FriendMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FriendMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.FriendMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FriendMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FriendMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.FriendMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.FriendMsg)
  return target;
}

size_t FriendMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.FriendMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FriendMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FriendMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FriendMsg::GetClassData() const { return &_class_data_; }


void FriendMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FriendMsg*>(&to_msg);
  auto& from = static_cast<const FriendMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.FriendMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FriendMsg::CopyFrom(const FriendMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.FriendMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendMsg::IsInitialized() const {
  return true;
}

void FriendMsg::InternalSwap(FriendMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FriendMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[2]);
}

// ===================================================================

class SystemNotify::_Internal {
 public:
};

SystemNotify::SystemNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.SystemNotify)
}
SystemNotify::SystemNotify(const SystemNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SystemNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.SystemNotify)
}

inline void SystemNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SystemNotify::~SystemNotify() {
  // @@protoc_insertion_point(destructor:msg.SystemNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SystemNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void SystemNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SystemNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.SystemNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SystemNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.SystemNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.SystemNotify)
  return target;
}

size_t SystemNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.SystemNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SystemNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SystemNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SystemNotify::GetClassData() const { return &_class_data_; }


void SystemNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SystemNotify*>(&to_msg);
  auto& from = static_cast<const SystemNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.SystemNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SystemNotify::CopyFrom(const SystemNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.SystemNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemNotify::IsInitialized() const {
  return true;
}

void SystemNotify::InternalSwap(SystemNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[3]);
}

// ===================================================================

class GroupCtrl::_Internal {
 public:
};

GroupCtrl::GroupCtrl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GroupCtrl)
}
GroupCtrl::GroupCtrl(const GroupCtrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupCtrl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:msg.GroupCtrl)
}

inline void GroupCtrl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupCtrl::~GroupCtrl() {
  // @@protoc_insertion_point(destructor:msg.GroupCtrl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupCtrl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void GroupCtrl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GroupCtrl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupCtrl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupCtrl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GroupCtrl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GroupCtrl)
  return target;
}

size_t GroupCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GroupCtrl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupCtrl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupCtrl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupCtrl::GetClassData() const { return &_class_data_; }


void GroupCtrl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupCtrl*>(&to_msg);
  auto& from = static_cast<const GroupCtrl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GroupCtrl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupCtrl::CopyFrom(const GroupCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GroupCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupCtrl::IsInitialized() const {
  return true;
}

void GroupCtrl::InternalSwap(GroupCtrl* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupCtrl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[4]);
}

// ===================================================================

class GroupMsg::_Internal {
 public:
};

GroupMsg::GroupMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GroupMsg)
}
GroupMsg::GroupMsg(const GroupMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:msg.GroupMsg)
}

inline void GroupMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GroupMsg::~GroupMsg() {
  // @@protoc_insertion_point(destructor:msg.GroupMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void GroupMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GroupMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GroupMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GroupMsg)
  return target;
}

size_t GroupMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GroupMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupMsg::GetClassData() const { return &_class_data_; }


void GroupMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupMsg*>(&to_msg);
  auto& from = static_cast<const GroupMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GroupMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupMsg::CopyFrom(const GroupMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GroupMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMsg::IsInitialized() const {
  return true;
}

void GroupMsg::InternalSwap(GroupMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[5]);
}

// ===================================================================

class Pull::_Internal {
 public:
};

Pull::Pull(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Pull)
}
Pull::Pull(const Pull& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pull* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.local_seq_){}
    , decltype(_impl_.sync_time_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.local_seq_, &from._impl_.local_seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.local_seq_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:msg.Pull)
}

inline void Pull::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.local_seq_){uint64_t{0u}}
    , decltype(_impl_.sync_time_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.limit_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pull::~Pull() {
  // @@protoc_insertion_point(destructor:msg.Pull)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pull::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pull::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pull::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Pull)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.local_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.local_seq_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pull::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 local_seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.local_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sync_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sync_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pull::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Pull)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 local_seq = 1;
  if (this->_internal_local_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_local_seq(), target);
  }

  // int64 sync_time = 2;
  if (this->_internal_sync_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_sync_time(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // uint32 limit = 4;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Pull)
  return target;
}

size_t Pull::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Pull)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 local_seq = 1;
  if (this->_internal_local_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_local_seq());
  }

  // int64 sync_time = 2;
  if (this->_internal_sync_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sync_time());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // uint32 limit = 4;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pull::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pull::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pull::GetClassData() const { return &_class_data_; }


void Pull::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pull*>(&to_msg);
  auto& from = static_cast<const Pull&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Pull)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_local_seq() != 0) {
    _this->_internal_set_local_seq(from._internal_local_seq());
  }
  if (from._internal_sync_time() != 0) {
    _this->_internal_set_sync_time(from._internal_sync_time());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pull::CopyFrom(const Pull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Pull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pull::IsInitialized() const {
  return true;
}

void Pull::InternalSwap(Pull* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pull, _impl_.limit_)
      + sizeof(Pull::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(Pull, _impl_.local_seq_)>(
          reinterpret_cast<char*>(&_impl_.local_seq_),
          reinterpret_cast<char*>(&other->_impl_.local_seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pull::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[6]);
}

// ===================================================================

class Log::_Internal {
 public:
};

Log::Log(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Log)
}
Log::Log(const Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Log* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:msg.Log)
}

inline void Log::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:msg.Log)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Log::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  _impl_.content_.Destroy();
}

void Log::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Log)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Log::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.Log.token"));
        } else
          goto handle_unusual;
        continue;
      // bytes content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Log::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Log)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.Log.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Log)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // bytes content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Log::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Log::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Log::GetClassData() const { return &_class_data_; }


void Log::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Log*>(&to_msg);
  auto& from = static_cast<const Log&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Log)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::InternalSwap(Log* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Log::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[7]);
}

// ===================================================================

class ProtoReq::_Internal {
 public:
  static const ::msg::FriendCtrl& fctrl(const ProtoReq* msg);
  static const ::msg::FriendState& fstate(const ProtoReq* msg);
  static const ::msg::FriendMsg& fmsg(const ProtoReq* msg);
  static const ::msg::SystemNotify& notify(const ProtoReq* msg);
  static const ::msg::GroupCtrl& gctrl(const ProtoReq* msg);
  static const ::msg::GroupMsg& gmsg(const ProtoReq* msg);
  static const ::msg::Pull& pull(const ProtoReq* msg);
  static const ::msg::Log& log(const ProtoReq* msg);
};

const ::msg::FriendCtrl&
ProtoReq::_Internal::fctrl(const ProtoReq* msg) {
  return *msg->_impl_.data_.fctrl_;
}
const ::msg::FriendState&
ProtoReq::_Internal::fstate(const ProtoReq* msg) {
  return *msg->_impl_.data_.fstate_;
}
const ::msg::FriendMsg&
ProtoReq::_Internal::fmsg(const ProtoReq* msg) {
  return *msg->_impl_.data_.fmsg_;
}
const ::msg::SystemNotify&
ProtoReq::_Internal::notify(const ProtoReq* msg) {
  return *msg->_impl_.data_.notify_;
}
const ::msg::GroupCtrl&
ProtoReq::_Internal::gctrl(const ProtoReq* msg) {
  return *msg->_impl_.data_.gctrl_;
}
const ::msg::GroupMsg&
ProtoReq::_Internal::gmsg(const ProtoReq* msg) {
  return *msg->_impl_.data_.gmsg_;
}
const ::msg::Pull&
ProtoReq::_Internal::pull(const ProtoReq* msg) {
  return *msg->_impl_.data_.pull_;
}
const ::msg::Log&
ProtoReq::_Internal::log(const ProtoReq* msg) {
  return *msg->_impl_.data_.log_;
}
void ProtoReq::set_allocated_fctrl(::msg::FriendCtrl* fctrl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (fctrl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fctrl);
    if (message_arena != submessage_arena) {
      fctrl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fctrl, submessage_arena);
    }
    set_has_fctrl();
    _impl_.data_.fctrl_ = fctrl;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.ProtoReq.fctrl)
}
void ProtoReq::set_allocated_fstate(::msg::FriendState* fstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (fstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fstate);
    if (message_arena != submessage_arena) {
      fstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fstate, submessage_arena);
    }
    set_has_fstate();
    _impl_.data_.fstate_ = fstate;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.ProtoReq.fstate)
}
void ProtoReq::set_allocated_fmsg(::msg::FriendMsg* fmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (fmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fmsg);
    if (message_arena != submessage_arena) {
      fmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fmsg, submessage_arena);
    }
    set_has_fmsg();
    _impl_.data_.fmsg_ = fmsg;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.ProtoReq.fmsg)
}
void ProtoReq::set_allocated_notify(::msg::SystemNotify* notify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (notify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(notify);
    if (message_arena != submessage_arena) {
      notify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notify, submessage_arena);
    }
    set_has_notify();
    _impl_.data_.notify_ = notify;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.ProtoReq.notify)
}
void ProtoReq::set_allocated_gctrl(::msg::GroupCtrl* gctrl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (gctrl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gctrl);
    if (message_arena != submessage_arena) {
      gctrl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gctrl, submessage_arena);
    }
    set_has_gctrl();
    _impl_.data_.gctrl_ = gctrl;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.ProtoReq.gctrl)
}
void ProtoReq::set_allocated_gmsg(::msg::GroupMsg* gmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (gmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gmsg);
    if (message_arena != submessage_arena) {
      gmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gmsg, submessage_arena);
    }
    set_has_gmsg();
    _impl_.data_.gmsg_ = gmsg;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.ProtoReq.gmsg)
}
void ProtoReq::set_allocated_pull(::msg::Pull* pull) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (pull) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pull);
    if (message_arena != submessage_arena) {
      pull = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pull, submessage_arena);
    }
    set_has_pull();
    _impl_.data_.pull_ = pull;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.ProtoReq.pull)
}
void ProtoReq::set_allocated_log(::msg::Log* log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(log);
    if (message_arena != submessage_arena) {
      log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    set_has_log();
    _impl_.data_.log_ = log;
  }
  // @@protoc_insertion_point(field_set_allocated:msg.ProtoReq.log)
}
ProtoReq::ProtoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ProtoReq)
}
ProtoReq::ProtoReq(const ProtoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtoReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.from_uid_){}
    , decltype(_impl_.to_id_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_id_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.to_id_));
  clear_has_data();
  switch (from.data_case()) {
    case kFctrl: {
      _this->_internal_mutable_fctrl()->::msg::FriendCtrl::MergeFrom(
          from._internal_fctrl());
      break;
    }
    case kFstate: {
      _this->_internal_mutable_fstate()->::msg::FriendState::MergeFrom(
          from._internal_fstate());
      break;
    }
    case kFmsg: {
      _this->_internal_mutable_fmsg()->::msg::FriendMsg::MergeFrom(
          from._internal_fmsg());
      break;
    }
    case kNotify: {
      _this->_internal_mutable_notify()->::msg::SystemNotify::MergeFrom(
          from._internal_notify());
      break;
    }
    case kGctrl: {
      _this->_internal_mutable_gctrl()->::msg::GroupCtrl::MergeFrom(
          from._internal_gctrl());
      break;
    }
    case kGmsg: {
      _this->_internal_mutable_gmsg()->::msg::GroupMsg::MergeFrom(
          from._internal_gmsg());
      break;
    }
    case kPull: {
      _this->_internal_mutable_pull()->::msg::Pull::MergeFrom(
          from._internal_pull());
      break;
    }
    case kLog: {
      _this->_internal_mutable_log()->::msg::Log::MergeFrom(
          from._internal_log());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:msg.ProtoReq)
}

inline void ProtoReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.from_uid_){uint64_t{0u}}
    , decltype(_impl_.to_id_){uint64_t{0u}}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

ProtoReq::~ProtoReq() {
  // @@protoc_insertion_point(destructor:msg.ProtoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void ProtoReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoReq::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:msg.ProtoReq)
  switch (data_case()) {
    case kFctrl: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.fctrl_;
      }
      break;
    }
    case kFstate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.fstate_;
      }
      break;
    }
    case kFmsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.fmsg_;
      }
      break;
    }
    case kNotify: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.notify_;
      }
      break;
    }
    case kGctrl: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.gctrl_;
      }
      break;
    }
    case kGmsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.gmsg_;
      }
      break;
    }
    case kPull: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.pull_;
      }
      break;
    }
    case kLog: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.log_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void ProtoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ProtoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.to_id_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.to_id_));
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.ProtoReqType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::ProtoReqType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 from_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.from_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 to_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.to_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.FriendCtrl fctrl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_fctrl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.FriendState fstate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_fstate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.FriendMsg fmsg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_fmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.SystemNotify notify = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_notify(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.GroupCtrl gctrl = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_gctrl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.GroupMsg gmsg = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_gmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.Pull pull = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_pull(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.Log log = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_log(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ProtoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.ProtoReqType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // uint64 from_uid = 3;
  if (this->_internal_from_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_from_uid(), target);
  }

  // uint64 to_id = 4;
  if (this->_internal_to_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_to_id(), target);
  }

  // .msg.FriendCtrl fctrl = 11;
  if (_internal_has_fctrl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::fctrl(this),
        _Internal::fctrl(this).GetCachedSize(), target, stream);
  }

  // .msg.FriendState fstate = 12;
  if (_internal_has_fstate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::fstate(this),
        _Internal::fstate(this).GetCachedSize(), target, stream);
  }

  // .msg.FriendMsg fmsg = 13;
  if (_internal_has_fmsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::fmsg(this),
        _Internal::fmsg(this).GetCachedSize(), target, stream);
  }

  // .msg.SystemNotify notify = 14;
  if (_internal_has_notify()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::notify(this),
        _Internal::notify(this).GetCachedSize(), target, stream);
  }

  // .msg.GroupCtrl gctrl = 15;
  if (_internal_has_gctrl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::gctrl(this),
        _Internal::gctrl(this).GetCachedSize(), target, stream);
  }

  // .msg.GroupMsg gmsg = 16;
  if (_internal_has_gmsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::gmsg(this),
        _Internal::gmsg(this).GetCachedSize(), target, stream);
  }

  // .msg.Pull pull = 17;
  if (_internal_has_pull()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::pull(this),
        _Internal::pull(this).GetCachedSize(), target, stream);
  }

  // .msg.Log log = 18;
  if (_internal_has_log()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::log(this),
        _Internal::log(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ProtoReq)
  return target;
}

size_t ProtoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ProtoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.ProtoReqType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  // uint64 from_uid = 3;
  if (this->_internal_from_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_from_uid());
  }

  // uint64 to_id = 4;
  if (this->_internal_to_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_to_id());
  }

  switch (data_case()) {
    // .msg.FriendCtrl fctrl = 11;
    case kFctrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.fctrl_);
      break;
    }
    // .msg.FriendState fstate = 12;
    case kFstate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.fstate_);
      break;
    }
    // .msg.FriendMsg fmsg = 13;
    case kFmsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.fmsg_);
      break;
    }
    // .msg.SystemNotify notify = 14;
    case kNotify: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.notify_);
      break;
    }
    // .msg.GroupCtrl gctrl = 15;
    case kGctrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.gctrl_);
      break;
    }
    // .msg.GroupMsg gmsg = 16;
    case kGmsg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.gmsg_);
      break;
    }
    // .msg.Pull pull = 17;
    case kPull: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.pull_);
      break;
    }
    // .msg.Log log = 18;
    case kLog: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.log_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoReq::GetClassData() const { return &_class_data_; }


void ProtoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtoReq*>(&to_msg);
  auto& from = static_cast<const ProtoReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ProtoReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_from_uid() != 0) {
    _this->_internal_set_from_uid(from._internal_from_uid());
  }
  if (from._internal_to_id() != 0) {
    _this->_internal_set_to_id(from._internal_to_id());
  }
  switch (from.data_case()) {
    case kFctrl: {
      _this->_internal_mutable_fctrl()->::msg::FriendCtrl::MergeFrom(
          from._internal_fctrl());
      break;
    }
    case kFstate: {
      _this->_internal_mutable_fstate()->::msg::FriendState::MergeFrom(
          from._internal_fstate());
      break;
    }
    case kFmsg: {
      _this->_internal_mutable_fmsg()->::msg::FriendMsg::MergeFrom(
          from._internal_fmsg());
      break;
    }
    case kNotify: {
      _this->_internal_mutable_notify()->::msg::SystemNotify::MergeFrom(
          from._internal_notify());
      break;
    }
    case kGctrl: {
      _this->_internal_mutable_gctrl()->::msg::GroupCtrl::MergeFrom(
          from._internal_gctrl());
      break;
    }
    case kGmsg: {
      _this->_internal_mutable_gmsg()->::msg::GroupMsg::MergeFrom(
          from._internal_gmsg());
      break;
    }
    case kPull: {
      _this->_internal_mutable_pull()->::msg::Pull::MergeFrom(
          from._internal_pull());
      break;
    }
    case kLog: {
      _this->_internal_mutable_log()->::msg::Log::MergeFrom(
          from._internal_log());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoReq::CopyFrom(const ProtoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ProtoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoReq::IsInitialized() const {
  return true;
}

void ProtoReq::InternalSwap(ProtoReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtoReq, _impl_.to_id_)
      + sizeof(ProtoReq::_impl_.to_id_)
      - PROTOBUF_FIELD_OFFSET(ProtoReq, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[8]);
}

// ===================================================================

class ProtoResp::_Internal {
 public:
};

ProtoResp::ProtoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ProtoResp)
}
ProtoResp::ProtoResp(const ProtoResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProtoResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.str_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_result();
  switch (from.result_case()) {
    case kTimestamp: {
      _this->_internal_set_timestamp(from._internal_timestamp());
      break;
    }
    case kErrorCode: {
      _this->_internal_set_error_code(from._internal_error_code());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  clear_has_str();
  switch (from.str_case()) {
    case kMsgid: {
      _this->_internal_set_msgid(from._internal_msgid());
      break;
    }
    case kErr: {
      _this->_internal_set_err(from._internal_err());
      break;
    }
    case STR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:msg.ProtoResp)
}

inline void ProtoResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.str_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_result();
  clear_has_str();
}

ProtoResp::~ProtoResp() {
  // @@protoc_insertion_point(destructor:msg.ProtoResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_result()) {
    clear_result();
  }
  if (has_str()) {
    clear_str();
  }
}

void ProtoResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoResp::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:msg.ProtoResp)
  switch (result_case()) {
    case kTimestamp: {
      // No need to clear
      break;
    }
    case kErrorCode: {
      // No need to clear
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESULT_NOT_SET;
}

void ProtoResp::clear_str() {
// @@protoc_insertion_point(one_of_clear_start:msg.ProtoResp)
  switch (str_case()) {
    case kMsgid: {
      _impl_.str_.msgid_.Destroy();
      break;
    }
    case kErr: {
      _impl_.str_.err_.Destroy();
      break;
    }
    case STR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = STR_NOT_SET;
}


void ProtoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ProtoResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_result();
  clear_str();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_error_code(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msgid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msgid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ProtoResp.msgid"));
        } else
          goto handle_unusual;
        continue;
      // string err = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_err();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ProtoResp.err"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ProtoResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // int32 error_code = 2;
  if (_internal_has_error_code()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_error_code(), target);
  }

  // string msgid = 3;
  if (_internal_has_msgid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msgid().data(), static_cast<int>(this->_internal_msgid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ProtoResp.msgid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msgid(), target);
  }

  // string err = 4;
  if (_internal_has_err()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_err().data(), static_cast<int>(this->_internal_err().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ProtoResp.err");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_err(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ProtoResp)
  return target;
}

size_t ProtoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ProtoResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (result_case()) {
    // int64 timestamp = 1;
    case kTimestamp: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
      break;
    }
    // int32 error_code = 2;
    case kErrorCode: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  switch (str_case()) {
    // string msgid = 3;
    case kMsgid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_msgid());
      break;
    }
    // string err = 4;
    case kErr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_err());
      break;
    }
    case STR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtoResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoResp::GetClassData() const { return &_class_data_; }


void ProtoResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProtoResp*>(&to_msg);
  auto& from = static_cast<const ProtoResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ProtoResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.result_case()) {
    case kTimestamp: {
      _this->_internal_set_timestamp(from._internal_timestamp());
      break;
    }
    case kErrorCode: {
      _this->_internal_set_error_code(from._internal_error_code());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  switch (from.str_case()) {
    case kMsgid: {
      _this->_internal_set_msgid(from._internal_msgid());
      break;
    }
    case kErr: {
      _this->_internal_set_err(from._internal_err());
      break;
    }
    case STR_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoResp::CopyFrom(const ProtoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ProtoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoResp::IsInitialized() const {
  return true;
}

void ProtoResp::InternalSwap(ProtoResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
  swap(_impl_.str_, other->_impl_.str_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[9]);
}

// ===================================================================

class MqMessage::_Internal {
 public:
  static const ::msg::ProtoReq& origin_req(const MqMessage* msg);
  static const ::msg::ProtoResp& handle_result(const MqMessage* msg);
};

const ::msg::ProtoReq&
MqMessage::_Internal::origin_req(const MqMessage* msg) {
  return *msg->_impl_.origin_req_;
}
const ::msg::ProtoResp&
MqMessage::_Internal::handle_result(const MqMessage* msg) {
  return *msg->_impl_.handle_result_;
}
MqMessage::MqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.MqMessage)
}
MqMessage::MqMessage(const MqMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MqMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.origin_req_){nullptr}
    , decltype(_impl_.handle_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin_req()) {
    _this->_impl_.origin_req_ = new ::msg::ProtoReq(*from._impl_.origin_req_);
  }
  if (from._internal_has_handle_result()) {
    _this->_impl_.handle_result_ = new ::msg::ProtoResp(*from._impl_.handle_result_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.MqMessage)
}

inline void MqMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.origin_req_){nullptr}
    , decltype(_impl_.handle_result_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MqMessage::~MqMessage() {
  // @@protoc_insertion_point(destructor:msg.MqMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MqMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.origin_req_;
  if (this != internal_default_instance()) delete _impl_.handle_result_;
}

void MqMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MqMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MqMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.origin_req_ != nullptr) {
    delete _impl_.origin_req_;
  }
  _impl_.origin_req_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.handle_result_ != nullptr) {
    delete _impl_.handle_result_;
  }
  _impl_.handle_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MqMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.ProtoReq origin_req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.ProtoResp handle_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MqMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MqMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.ProtoReq origin_req = 1;
  if (this->_internal_has_origin_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::origin_req(this),
        _Internal::origin_req(this).GetCachedSize(), target, stream);
  }

  // .msg.ProtoResp handle_result = 2;
  if (this->_internal_has_handle_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::handle_result(this),
        _Internal::handle_result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MqMessage)
  return target;
}

size_t MqMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MqMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.ProtoReq origin_req = 1;
  if (this->_internal_has_origin_req()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_req_);
  }

  // .msg.ProtoResp handle_result = 2;
  if (this->_internal_has_handle_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.handle_result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MqMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MqMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MqMessage::GetClassData() const { return &_class_data_; }


void MqMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MqMessage*>(&to_msg);
  auto& from = static_cast<const MqMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.MqMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_origin_req()) {
    _this->_internal_mutable_origin_req()->::msg::ProtoReq::MergeFrom(
        from._internal_origin_req());
  }
  if (from._internal_has_handle_result()) {
    _this->_internal_mutable_handle_result()->::msg::ProtoResp::MergeFrom(
        from._internal_handle_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MqMessage::CopyFrom(const MqMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MqMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MqMessage::IsInitialized() const {
  return true;
}

void MqMessage::InternalSwap(MqMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MqMessage, _impl_.handle_result_)
      + sizeof(MqMessage::_impl_.handle_result_)
      - PROTOBUF_FIELD_OFFSET(MqMessage, _impl_.origin_req_)>(
          reinterpret_cast<char*>(&_impl_.origin_req_),
          reinterpret_cast<char*>(&other->_impl_.origin_req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MqMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[10]);
}

// ===================================================================

class PushReq::_Internal {
 public:
  static const ::msg::MqMessage& message(const PushReq* msg);
};

const ::msg::MqMessage&
PushReq::_Internal::message(const PushReq* msg) {
  return *msg->_impl_.message_;
}
PushReq::PushReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PushReq)
}
PushReq::PushReq(const PushReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PushReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){nullptr}
    , decltype(_impl_.seq_){}
    , decltype(_impl_.to_uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    _this->_impl_.message_ = new ::msg::MqMessage(*from._impl_.message_);
  }
  ::memcpy(&_impl_.seq_, &from._impl_.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_uid_) -
    reinterpret_cast<char*>(&_impl_.seq_)) + sizeof(_impl_.to_uid_));
  // @@protoc_insertion_point(copy_constructor:msg.PushReq)
}

inline void PushReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){nullptr}
    , decltype(_impl_.seq_){int64_t{0}}
    , decltype(_impl_.to_uid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PushReq::~PushReq() {
  // @@protoc_insertion_point(destructor:msg.PushReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PushReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.message_;
}

void PushReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PushReq::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PushReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
  ::memset(&_impl_.seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.to_uid_) -
      reinterpret_cast<char*>(&_impl_.seq_)) + sizeof(_impl_.to_uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.MqMessage message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 seq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 to_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.to_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PushReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PushReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.MqMessage message = 1;
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // int64 seq = 2;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_seq(), target);
  }

  // uint64 to_uid = 3;
  if (this->_internal_to_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_to_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PushReq)
  return target;
}

size_t PushReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PushReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.MqMessage message = 1;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.message_);
  }

  // int64 seq = 2;
  if (this->_internal_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // uint64 to_uid = 3;
  if (this->_internal_to_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_to_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PushReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushReq::GetClassData() const { return &_class_data_; }


void PushReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PushReq*>(&to_msg);
  auto& from = static_cast<const PushReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PushReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _this->_internal_mutable_message()->::msg::MqMessage::MergeFrom(
        from._internal_message());
  }
  if (from._internal_seq() != 0) {
    _this->_internal_set_seq(from._internal_seq());
  }
  if (from._internal_to_uid() != 0) {
    _this->_internal_set_to_uid(from._internal_to_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushReq::CopyFrom(const PushReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PushReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushReq::IsInitialized() const {
  return true;
}

void PushReq::InternalSwap(PushReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PushReq, _impl_.to_uid_)
      + sizeof(PushReq::_impl_.to_uid_)
      - PROTOBUF_FIELD_OFFSET(PushReq, _impl_.message_)>(
          reinterpret_cast<char*>(&_impl_.message_),
          reinterpret_cast<char*>(&other->_impl_.message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PushReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[11]);
}

// ===================================================================

class PushResp::_Internal {
 public:
};

PushResp::PushResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:msg.PushResp)
}
PushResp::PushResp(const PushResp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PushResp* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.PushResp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushResp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PushResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::FriendCtrl*
Arena::CreateMaybeMessage< ::msg::FriendCtrl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::FriendCtrl >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::FriendState*
Arena::CreateMaybeMessage< ::msg::FriendState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::FriendState >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::FriendMsg*
Arena::CreateMaybeMessage< ::msg::FriendMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::FriendMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::SystemNotify*
Arena::CreateMaybeMessage< ::msg::SystemNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::SystemNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GroupCtrl*
Arena::CreateMaybeMessage< ::msg::GroupCtrl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GroupCtrl >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GroupMsg*
Arena::CreateMaybeMessage< ::msg::GroupMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GroupMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Pull*
Arena::CreateMaybeMessage< ::msg::Pull >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Pull >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Log*
Arena::CreateMaybeMessage< ::msg::Log >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Log >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ProtoReq*
Arena::CreateMaybeMessage< ::msg::ProtoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ProtoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ProtoResp*
Arena::CreateMaybeMessage< ::msg::ProtoResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ProtoResp >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MqMessage*
Arena::CreateMaybeMessage< ::msg::MqMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::MqMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PushReq*
Arena::CreateMaybeMessage< ::msg::PushReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PushReq >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PushResp*
Arena::CreateMaybeMessage< ::msg::PushResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PushResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
