// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: route.proto
#ifndef GRPC_route_2eproto__INCLUDED
#define GRPC_route_2eproto__INCLUDED

#include "route.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace route {

// //////////////////////////////////////////////////////////////////////////////
//
class RouteService final {
 public:
  static constexpr char const* service_full_name() {
    return "route.RouteService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // msg server 验证
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::route::LoginRequest& request, ::route::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::route::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::route::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    // login server获取
    virtual ::grpc::Status DispatchMsgServer(::grpc::ClientContext* context, const ::route::DispatchMsgServerRequest& request, ::route::DispatchMsgServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::DispatchMsgServerResponse>> AsyncDispatchMsgServer(::grpc::ClientContext* context, const ::route::DispatchMsgServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::DispatchMsgServerResponse>>(AsyncDispatchMsgServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::DispatchMsgServerResponse>> PrepareAsyncDispatchMsgServer(::grpc::ClientContext* context, const ::route::DispatchMsgServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::DispatchMsgServerResponse>>(PrepareAsyncDispatchMsgServerRaw(context, request, cq));
    }
    // msg server心跳或注册自己
    virtual ::grpc::Status MsgServerHeartBeat(::grpc::ClientContext* context, const ::route::HeartBeatRequest& request, ::route::HeartBeatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::HeartBeatResponse>> AsyncMsgServerHeartBeat(::grpc::ClientContext* context, const ::route::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::HeartBeatResponse>>(AsyncMsgServerHeartBeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::HeartBeatResponse>> PrepareAsyncMsgServerHeartBeat(::grpc::ClientContext* context, const ::route::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::HeartBeatResponse>>(PrepareAsyncMsgServerHeartBeatRaw(context, request, cq));
    }
    // transfer 向所有msg推送，
    virtual ::grpc::Status GetMsgServer(::grpc::ClientContext* context, const ::route::GetMsgServerRequest& request, ::route::GetMsgServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::GetMsgServerResponse>> AsyncGetMsgServer(::grpc::ClientContext* context, const ::route::GetMsgServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::GetMsgServerResponse>>(AsyncGetMsgServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::GetMsgServerResponse>> PrepareAsyncGetMsgServer(::grpc::ClientContext* context, const ::route::GetMsgServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::route::GetMsgServerResponse>>(PrepareAsyncGetMsgServerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // msg server 验证
      virtual void Login(::grpc::ClientContext* context, const ::route::LoginRequest* request, ::route::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::route::LoginRequest* request, ::route::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // login server获取
      virtual void DispatchMsgServer(::grpc::ClientContext* context, const ::route::DispatchMsgServerRequest* request, ::route::DispatchMsgServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DispatchMsgServer(::grpc::ClientContext* context, const ::route::DispatchMsgServerRequest* request, ::route::DispatchMsgServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // msg server心跳或注册自己
      virtual void MsgServerHeartBeat(::grpc::ClientContext* context, const ::route::HeartBeatRequest* request, ::route::HeartBeatResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MsgServerHeartBeat(::grpc::ClientContext* context, const ::route::HeartBeatRequest* request, ::route::HeartBeatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // transfer 向所有msg推送，
      virtual void GetMsgServer(::grpc::ClientContext* context, const ::route::GetMsgServerRequest* request, ::route::GetMsgServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMsgServer(::grpc::ClientContext* context, const ::route::GetMsgServerRequest* request, ::route::GetMsgServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::route::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::route::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::route::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::route::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::route::DispatchMsgServerResponse>* AsyncDispatchMsgServerRaw(::grpc::ClientContext* context, const ::route::DispatchMsgServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::route::DispatchMsgServerResponse>* PrepareAsyncDispatchMsgServerRaw(::grpc::ClientContext* context, const ::route::DispatchMsgServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::route::HeartBeatResponse>* AsyncMsgServerHeartBeatRaw(::grpc::ClientContext* context, const ::route::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::route::HeartBeatResponse>* PrepareAsyncMsgServerHeartBeatRaw(::grpc::ClientContext* context, const ::route::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::route::GetMsgServerResponse>* AsyncGetMsgServerRaw(::grpc::ClientContext* context, const ::route::GetMsgServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::route::GetMsgServerResponse>* PrepareAsyncGetMsgServerRaw(::grpc::ClientContext* context, const ::route::GetMsgServerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Login(::grpc::ClientContext* context, const ::route::LoginRequest& request, ::route::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::route::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::route::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status DispatchMsgServer(::grpc::ClientContext* context, const ::route::DispatchMsgServerRequest& request, ::route::DispatchMsgServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::DispatchMsgServerResponse>> AsyncDispatchMsgServer(::grpc::ClientContext* context, const ::route::DispatchMsgServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::DispatchMsgServerResponse>>(AsyncDispatchMsgServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::DispatchMsgServerResponse>> PrepareAsyncDispatchMsgServer(::grpc::ClientContext* context, const ::route::DispatchMsgServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::DispatchMsgServerResponse>>(PrepareAsyncDispatchMsgServerRaw(context, request, cq));
    }
    ::grpc::Status MsgServerHeartBeat(::grpc::ClientContext* context, const ::route::HeartBeatRequest& request, ::route::HeartBeatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::HeartBeatResponse>> AsyncMsgServerHeartBeat(::grpc::ClientContext* context, const ::route::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::HeartBeatResponse>>(AsyncMsgServerHeartBeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::HeartBeatResponse>> PrepareAsyncMsgServerHeartBeat(::grpc::ClientContext* context, const ::route::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::HeartBeatResponse>>(PrepareAsyncMsgServerHeartBeatRaw(context, request, cq));
    }
    ::grpc::Status GetMsgServer(::grpc::ClientContext* context, const ::route::GetMsgServerRequest& request, ::route::GetMsgServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::GetMsgServerResponse>> AsyncGetMsgServer(::grpc::ClientContext* context, const ::route::GetMsgServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::GetMsgServerResponse>>(AsyncGetMsgServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::GetMsgServerResponse>> PrepareAsyncGetMsgServer(::grpc::ClientContext* context, const ::route::GetMsgServerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::route::GetMsgServerResponse>>(PrepareAsyncGetMsgServerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Login(::grpc::ClientContext* context, const ::route::LoginRequest* request, ::route::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::route::LoginRequest* request, ::route::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DispatchMsgServer(::grpc::ClientContext* context, const ::route::DispatchMsgServerRequest* request, ::route::DispatchMsgServerResponse* response, std::function<void(::grpc::Status)>) override;
      void DispatchMsgServer(::grpc::ClientContext* context, const ::route::DispatchMsgServerRequest* request, ::route::DispatchMsgServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MsgServerHeartBeat(::grpc::ClientContext* context, const ::route::HeartBeatRequest* request, ::route::HeartBeatResponse* response, std::function<void(::grpc::Status)>) override;
      void MsgServerHeartBeat(::grpc::ClientContext* context, const ::route::HeartBeatRequest* request, ::route::HeartBeatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMsgServer(::grpc::ClientContext* context, const ::route::GetMsgServerRequest* request, ::route::GetMsgServerResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMsgServer(::grpc::ClientContext* context, const ::route::GetMsgServerRequest* request, ::route::GetMsgServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::route::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::route::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::route::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::route::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::route::DispatchMsgServerResponse>* AsyncDispatchMsgServerRaw(::grpc::ClientContext* context, const ::route::DispatchMsgServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::route::DispatchMsgServerResponse>* PrepareAsyncDispatchMsgServerRaw(::grpc::ClientContext* context, const ::route::DispatchMsgServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::route::HeartBeatResponse>* AsyncMsgServerHeartBeatRaw(::grpc::ClientContext* context, const ::route::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::route::HeartBeatResponse>* PrepareAsyncMsgServerHeartBeatRaw(::grpc::ClientContext* context, const ::route::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::route::GetMsgServerResponse>* AsyncGetMsgServerRaw(::grpc::ClientContext* context, const ::route::GetMsgServerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::route::GetMsgServerResponse>* PrepareAsyncGetMsgServerRaw(::grpc::ClientContext* context, const ::route::GetMsgServerRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_DispatchMsgServer_;
    const ::grpc::internal::RpcMethod rpcmethod_MsgServerHeartBeat_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMsgServer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // msg server 验证
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::route::LoginRequest* request, ::route::LoginResponse* response);
    // login server获取
    virtual ::grpc::Status DispatchMsgServer(::grpc::ServerContext* context, const ::route::DispatchMsgServerRequest* request, ::route::DispatchMsgServerResponse* response);
    // msg server心跳或注册自己
    virtual ::grpc::Status MsgServerHeartBeat(::grpc::ServerContext* context, const ::route::HeartBeatRequest* request, ::route::HeartBeatResponse* response);
    // transfer 向所有msg推送，
    virtual ::grpc::Status GetMsgServer(::grpc::ServerContext* context, const ::route::GetMsgServerRequest* request, ::route::GetMsgServerResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::route::LoginRequest* /*request*/, ::route::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::route::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::route::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DispatchMsgServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DispatchMsgServer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DispatchMsgServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DispatchMsgServer(::grpc::ServerContext* /*context*/, const ::route::DispatchMsgServerRequest* /*request*/, ::route::DispatchMsgServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDispatchMsgServer(::grpc::ServerContext* context, ::route::DispatchMsgServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::route::DispatchMsgServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MsgServerHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MsgServerHeartBeat() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_MsgServerHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MsgServerHeartBeat(::grpc::ServerContext* /*context*/, const ::route::HeartBeatRequest* /*request*/, ::route::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMsgServerHeartBeat(::grpc::ServerContext* context, ::route::HeartBeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::route::HeartBeatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMsgServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMsgServer() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetMsgServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMsgServer(::grpc::ServerContext* /*context*/, const ::route::GetMsgServerRequest* /*request*/, ::route::GetMsgServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMsgServer(::grpc::ServerContext* context, ::route::GetMsgServerRequest* request, ::grpc::ServerAsyncResponseWriter< ::route::GetMsgServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Login<WithAsyncMethod_DispatchMsgServer<WithAsyncMethod_MsgServerHeartBeat<WithAsyncMethod_GetMsgServer<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::route::LoginRequest, ::route::LoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::route::LoginRequest* request, ::route::LoginResponse* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::route::LoginRequest, ::route::LoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::route::LoginRequest, ::route::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::route::LoginRequest* /*request*/, ::route::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::route::LoginRequest* /*request*/, ::route::LoginResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DispatchMsgServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DispatchMsgServer() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::route::DispatchMsgServerRequest, ::route::DispatchMsgServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::route::DispatchMsgServerRequest* request, ::route::DispatchMsgServerResponse* response) { return this->DispatchMsgServer(context, request, response); }));}
    void SetMessageAllocatorFor_DispatchMsgServer(
        ::grpc::MessageAllocator< ::route::DispatchMsgServerRequest, ::route::DispatchMsgServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::route::DispatchMsgServerRequest, ::route::DispatchMsgServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DispatchMsgServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DispatchMsgServer(::grpc::ServerContext* /*context*/, const ::route::DispatchMsgServerRequest* /*request*/, ::route::DispatchMsgServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DispatchMsgServer(
      ::grpc::CallbackServerContext* /*context*/, const ::route::DispatchMsgServerRequest* /*request*/, ::route::DispatchMsgServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MsgServerHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MsgServerHeartBeat() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::route::HeartBeatRequest, ::route::HeartBeatResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::route::HeartBeatRequest* request, ::route::HeartBeatResponse* response) { return this->MsgServerHeartBeat(context, request, response); }));}
    void SetMessageAllocatorFor_MsgServerHeartBeat(
        ::grpc::MessageAllocator< ::route::HeartBeatRequest, ::route::HeartBeatResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::route::HeartBeatRequest, ::route::HeartBeatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MsgServerHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MsgServerHeartBeat(::grpc::ServerContext* /*context*/, const ::route::HeartBeatRequest* /*request*/, ::route::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MsgServerHeartBeat(
      ::grpc::CallbackServerContext* /*context*/, const ::route::HeartBeatRequest* /*request*/, ::route::HeartBeatResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMsgServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMsgServer() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::route::GetMsgServerRequest, ::route::GetMsgServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::route::GetMsgServerRequest* request, ::route::GetMsgServerResponse* response) { return this->GetMsgServer(context, request, response); }));}
    void SetMessageAllocatorFor_GetMsgServer(
        ::grpc::MessageAllocator< ::route::GetMsgServerRequest, ::route::GetMsgServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::route::GetMsgServerRequest, ::route::GetMsgServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMsgServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMsgServer(::grpc::ServerContext* /*context*/, const ::route::GetMsgServerRequest* /*request*/, ::route::GetMsgServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMsgServer(
      ::grpc::CallbackServerContext* /*context*/, const ::route::GetMsgServerRequest* /*request*/, ::route::GetMsgServerResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Login<WithCallbackMethod_DispatchMsgServer<WithCallbackMethod_MsgServerHeartBeat<WithCallbackMethod_GetMsgServer<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::route::LoginRequest* /*request*/, ::route::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DispatchMsgServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DispatchMsgServer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DispatchMsgServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DispatchMsgServer(::grpc::ServerContext* /*context*/, const ::route::DispatchMsgServerRequest* /*request*/, ::route::DispatchMsgServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MsgServerHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MsgServerHeartBeat() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_MsgServerHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MsgServerHeartBeat(::grpc::ServerContext* /*context*/, const ::route::HeartBeatRequest* /*request*/, ::route::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMsgServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMsgServer() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetMsgServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMsgServer(::grpc::ServerContext* /*context*/, const ::route::GetMsgServerRequest* /*request*/, ::route::GetMsgServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::route::LoginRequest* /*request*/, ::route::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DispatchMsgServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DispatchMsgServer() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DispatchMsgServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DispatchMsgServer(::grpc::ServerContext* /*context*/, const ::route::DispatchMsgServerRequest* /*request*/, ::route::DispatchMsgServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDispatchMsgServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MsgServerHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MsgServerHeartBeat() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_MsgServerHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MsgServerHeartBeat(::grpc::ServerContext* /*context*/, const ::route::HeartBeatRequest* /*request*/, ::route::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMsgServerHeartBeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMsgServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMsgServer() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetMsgServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMsgServer(::grpc::ServerContext* /*context*/, const ::route::GetMsgServerRequest* /*request*/, ::route::GetMsgServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMsgServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::route::LoginRequest* /*request*/, ::route::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DispatchMsgServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DispatchMsgServer() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DispatchMsgServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_DispatchMsgServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DispatchMsgServer(::grpc::ServerContext* /*context*/, const ::route::DispatchMsgServerRequest* /*request*/, ::route::DispatchMsgServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DispatchMsgServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MsgServerHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MsgServerHeartBeat() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MsgServerHeartBeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_MsgServerHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MsgServerHeartBeat(::grpc::ServerContext* /*context*/, const ::route::HeartBeatRequest* /*request*/, ::route::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MsgServerHeartBeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMsgServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMsgServer() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMsgServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMsgServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMsgServer(::grpc::ServerContext* /*context*/, const ::route::GetMsgServerRequest* /*request*/, ::route::GetMsgServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMsgServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::route::LoginRequest, ::route::LoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::route::LoginRequest, ::route::LoginResponse>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::route::LoginRequest* /*request*/, ::route::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::route::LoginRequest,::route::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DispatchMsgServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DispatchMsgServer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::route::DispatchMsgServerRequest, ::route::DispatchMsgServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::route::DispatchMsgServerRequest, ::route::DispatchMsgServerResponse>* streamer) {
                       return this->StreamedDispatchMsgServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DispatchMsgServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DispatchMsgServer(::grpc::ServerContext* /*context*/, const ::route::DispatchMsgServerRequest* /*request*/, ::route::DispatchMsgServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDispatchMsgServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::route::DispatchMsgServerRequest,::route::DispatchMsgServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MsgServerHeartBeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MsgServerHeartBeat() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::route::HeartBeatRequest, ::route::HeartBeatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::route::HeartBeatRequest, ::route::HeartBeatResponse>* streamer) {
                       return this->StreamedMsgServerHeartBeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MsgServerHeartBeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MsgServerHeartBeat(::grpc::ServerContext* /*context*/, const ::route::HeartBeatRequest* /*request*/, ::route::HeartBeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMsgServerHeartBeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::route::HeartBeatRequest,::route::HeartBeatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMsgServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMsgServer() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::route::GetMsgServerRequest, ::route::GetMsgServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::route::GetMsgServerRequest, ::route::GetMsgServerResponse>* streamer) {
                       return this->StreamedGetMsgServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMsgServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMsgServer(::grpc::ServerContext* /*context*/, const ::route::GetMsgServerRequest* /*request*/, ::route::GetMsgServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMsgServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::route::GetMsgServerRequest,::route::GetMsgServerResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_DispatchMsgServer<WithStreamedUnaryMethod_MsgServerHeartBeat<WithStreamedUnaryMethod_GetMsgServer<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_DispatchMsgServer<WithStreamedUnaryMethod_MsgServerHeartBeat<WithStreamedUnaryMethod_GetMsgServer<Service > > > > StreamedService;
};

}  // namespace route


#endif  // GRPC_route_2eproto__INCLUDED
