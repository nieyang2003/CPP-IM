// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.6
// source: route.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RouteService_Login_FullMethodName              = "/route.RouteService/Login"
	RouteService_DispatchMsgServer_FullMethodName  = "/route.RouteService/DispatchMsgServer"
	RouteService_MsgServerHeartBeat_FullMethodName = "/route.RouteService/MsgServerHeartBeat"
	RouteService_GetMsgServer_FullMethodName       = "/route.RouteService/GetMsgServer"
)

// RouteServiceClient is the client API for RouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteServiceClient interface {
	// msg server 验证
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// login server获取
	DispatchMsgServer(ctx context.Context, in *DispatchMsgServerRequest, opts ...grpc.CallOption) (*DispatchMsgServerResponse, error)
	// msg server心跳或注册自己
	MsgServerHeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error)
	// transfer 向所有msg推送，
	GetMsgServer(ctx context.Context, in *GetMsgServerRequest, opts ...grpc.CallOption) (*GetMsgServerResponse, error)
}

type routeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteServiceClient(cc grpc.ClientConnInterface) RouteServiceClient {
	return &routeServiceClient{cc}
}

func (c *routeServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, RouteService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) DispatchMsgServer(ctx context.Context, in *DispatchMsgServerRequest, opts ...grpc.CallOption) (*DispatchMsgServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DispatchMsgServerResponse)
	err := c.cc.Invoke(ctx, RouteService_DispatchMsgServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) MsgServerHeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartBeatResponse)
	err := c.cc.Invoke(ctx, RouteService_MsgServerHeartBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) GetMsgServer(ctx context.Context, in *GetMsgServerRequest, opts ...grpc.CallOption) (*GetMsgServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMsgServerResponse)
	err := c.cc.Invoke(ctx, RouteService_GetMsgServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteServiceServer is the server API for RouteService service.
// All implementations must embed UnimplementedRouteServiceServer
// for forward compatibility.
type RouteServiceServer interface {
	// msg server 验证
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// login server获取
	DispatchMsgServer(context.Context, *DispatchMsgServerRequest) (*DispatchMsgServerResponse, error)
	// msg server心跳或注册自己
	MsgServerHeartBeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error)
	// transfer 向所有msg推送，
	GetMsgServer(context.Context, *GetMsgServerRequest) (*GetMsgServerResponse, error)
	mustEmbedUnimplementedRouteServiceServer()
}

// UnimplementedRouteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRouteServiceServer struct{}

func (UnimplementedRouteServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedRouteServiceServer) DispatchMsgServer(context.Context, *DispatchMsgServerRequest) (*DispatchMsgServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchMsgServer not implemented")
}
func (UnimplementedRouteServiceServer) MsgServerHeartBeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgServerHeartBeat not implemented")
}
func (UnimplementedRouteServiceServer) GetMsgServer(context.Context, *GetMsgServerRequest) (*GetMsgServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsgServer not implemented")
}
func (UnimplementedRouteServiceServer) mustEmbedUnimplementedRouteServiceServer() {}
func (UnimplementedRouteServiceServer) testEmbeddedByValue()                      {}

// UnsafeRouteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteServiceServer will
// result in compilation errors.
type UnsafeRouteServiceServer interface {
	mustEmbedUnimplementedRouteServiceServer()
}

func RegisterRouteServiceServer(s grpc.ServiceRegistrar, srv RouteServiceServer) {
	// If the following call pancis, it indicates UnimplementedRouteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RouteService_ServiceDesc, srv)
}

func _RouteService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_DispatchMsgServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchMsgServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).DispatchMsgServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_DispatchMsgServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).DispatchMsgServer(ctx, req.(*DispatchMsgServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_MsgServerHeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).MsgServerHeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_MsgServerHeartBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).MsgServerHeartBeat(ctx, req.(*HeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_GetMsgServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMsgServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).GetMsgServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_GetMsgServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).GetMsgServer(ctx, req.(*GetMsgServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteService_ServiceDesc is the grpc.ServiceDesc for RouteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "route.RouteService",
	HandlerType: (*RouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _RouteService_Login_Handler,
		},
		{
			MethodName: "DispatchMsgServer",
			Handler:    _RouteService_DispatchMsgServer_Handler,
		},
		{
			MethodName: "MsgServerHeartBeat",
			Handler:    _RouteService_MsgServerHeartBeat_Handler,
		},
		{
			MethodName: "GetMsgServer",
			Handler:    _RouteService_GetMsgServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "route.proto",
}
